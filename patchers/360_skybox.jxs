<jittershader name="default">
	<description>Render 360 image as skybox</description>
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[

varying vec3 ray;
void main (void) {
	// output vertex to fill the viewport:
    gl_Position = vec4(gl_Vertex.xy, 0.0, 1.0);

	// start deriving ray direction by working back from the gl_Position
	//vec4 viewspace_ray = u_inverseprojectionmatrix * gl_Position;
	vec4 viewspace_ray = gl_ProjectionMatrixInverse * gl_Position;
	// set W to zero on this step in order to remove the translation component:
	vec4 worldspace_ray = gl_ModelViewMatrixInverse * vec4(viewspace_ray.xyz, 0.0);
	// this gives the ray direction in world space
	ray = worldspace_ray.xyz;
	
	gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
}
]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
uniform sampler2DRect tex0;
varying vec3 ray;

float PI = 3.141592653589793;

//expects normalized ray
vec4 equirectangular(sampler2DRect tex, mat4 textureMatrix, vec3 raydir) {
	// normalize ray:
	//vec3 raydir = normalize(ray);
	// derive normalized UV coordintates for equirectangular 360 sampling:
	vec2 uv = vec2(atan(raydir.z, raydir.x)*0.5, asin(raydir.y))/PI + 0.5;
	// scale up to texture dim for sampler2DRect:
	uv = (textureMatrix * vec4(uv, 0, 1)).xy;
	// sample texture:
	return texture2DRect(tex, uv);
}

void main(void) {
	gl_FragColor = equirectangular(tex0, gl_TextureMatrix[0], normalize(ray));
}
]]>
		</program>
	</language>
</jittershader>
